{
  "name": "asset-loader",
  "description": "Express.js view helper for including style or script tags! Has an easy syntax and supports 'bundle aliases' for grouping files together.",
  "author": {
    "name": "Dylan Hassinger",
    "email": "d@dylanized.com"
  },
  "version": "0.1.7",
  "keywords": [
    "assets",
    "pipeline",
    "require"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/dylanized/asset-loader.git"
  },
  "dependencies": {
    "path": "~0.4.9",
    "nconf": "~0.6.7"
  },
  "readme": "asset-loader\n========\n\nExpress.js view helper for including css or js tags. Includes bundle system for managing groups of files.\n\nThis module is backend-agnostic - use any tool to preprocess your asset files and get them into place. Once they are in place, feed the filenames to the Asset Loader and then use the helpers to render your tags.\n\n\nInstallation\n---\n\nLoad up the module in your app.js:\n\n    var assets = require('asset-loader');\n    assets.init(app.locals);\n\n\nConfiguration\n---\n\nBy default, assets are expected to be in the /assets folder and the default asset name is 'app'.\n\nOverride like this:\n\n    assets.init(app.locals, {prefix: '/tmp', defaultAsset: 'index'});\n    \n\nLoad Single Files\n---\n\nHere's how to use the view helpers:\n\nThe long-form helper:\n\n    <%- css('common') %>\t\toutputs: <link type=\"stylesheet/css\" href=\"/assets/common.css\" />    \n\t<%- js('jquery') %>\t\t\toutputs: <script type=\"text/javascript\" src=\"/assets/query.js\"></script>\n        \t\nIf no filename is given, they default to the \"app\" filename. (This can be changed in the settings.)\n\n    <%- css() %>\t\t\t\t<link type=\"stylesheet/css\" href=\"/assets/app.css\" />    \t\t\n    <%- js() %>\t\t\t\t\t<script type=\"text/javascript\" src=\"/assets/app.js\"></script>\n        \nBy default, asset loads files relative to the \"root\" setting (set to \"/assets\" by default). This can be changed in the settings.\n\nOverride the default root altogether by giving a full path (or URL) to your file:\n\n    <%- css('/styles/common.css') %>\n    <%- js('http://somedomain.com/jquery.min.js') %>\n\n\nLoad Multiple Files\n---\n\nLoad multiple files, one after another, like this:\n\n    <%- css('base, skin, custom') %>\n    \nOr like this:    \n    \n    <%- css(['base', 'skin', 'custom']) %>\n\n\nAlternate Syntax\n---\n\nYou can also use this syntax:\n\n    <%- assets.css('common') %>          \n    <%- assets.js('footer') %>          \n\n\nBundles\n---\n\nAsset Loader supports bundles, which are special aliases that can be mapped to whatever file(s) you want.\n\nIn development mode, load up the bundles with your uncompressed assets:\n\n    var bundleObj = {\n      css: {\n        app: ['base', 'skin', 'custom'],\n        custom: ['custom']\n      },  \n      js: {\n        head: ['jquery', 'common'], \n        footer: ['carousel', 'modernizr', 'popup']\n      }\n    }\n  \nIn production mode, give the bundles the compressed and concat'd version, with a cachebuster too:\n\n    var bundleObj = {\n      css: {\n    \t  app: \"app-kjhdky2r8ud2woidchjkwjd\",\n    \t  custom: \"custom-kljhdfwiufoi3jdlknd\"\n      },  \n      js: {\n        head: \"head-kjdfksjhdflsdkjsldkfj\", \n        footer: \"footer-kcjhidiwuhewdioune\"\n      }\n    }\n     \nPass in your bundle object like this:\n\n    assets.init(app.locals, { bundles: bundleObj });\t\n\t\nIt's up to you to take care of processing the files and naming them. Asset Loader just gets those names and takes it from there. You can pass the bundlers filenames with or without an extension.      \n\nIn the views, call your bundles just like other assets:\n\n    <%- css() %>\t\t\t\t\t\t<!-- app css bundle -->\n    <%- css('custom') %>\t\t\t\t<!-- custom css bundle -->\n\n    <%- js('head') %>\t\t\t\t\t<!-- head js bundle -->\n    <%- js('footer') %>\t\t\t\t\t<!-- footer js bundle -->\n        \nAsset Loader always checks for a bundle before it prints out the filename.    \n\n\nAll Options\n---\n\nHere is the complete config object and its defaults:\n\n    {\n      prefix: '/assets',\t\t// default public assets folder\n\t  defaultAsset: 'app',\t\t// default asset filename\n      bundles: null,\t\t\t// bundle object\n      helperName: 'assets',\t\t// the name of the main view helper\n      xhtml: true,\t\t\t\t// closing slashes on link tags for xml compatibility\n      prefixCSS: null,\t\t\t// overrides prefix\n      prefixJS: null,\t\t\t// overrides prefix\n      defaultCSS: null,\t\t\t// overrides defaultAsset\n      defaultJS: null\t\t\t// overrides defaultAsset\n    }  \n\n                      \nInspiration\n---\n\n- [Sails.js](http://sails.js) and [Asset Rack](https://github.com/techpines/asset-rack)\n- [Nap](https://github.com/craigspaeth/nap)\n- [Connect Assets](https://github.com/adunkman/connect-assets)\n- [Asset Smasher](https://github.com/jriecken/asset-smasher)\n- [RequireJS](http://requirejs.org/)\n\n\nContact\n---\n\nGot suggestions? [Email](mailto:d@dylanized.com) or [tweet](http://twitter.com/dylanized) me",
  "readmeFilename": "README.md",
  "_id": "asset-loader@0.1.7",
  "dist": {
    "shasum": "a7a6030fb2a6d0641522bff6cf638b5d58a2014f",
    "tarball": "http://registry.npmjs.org/asset-loader/-/asset-loader-0.1.7.tgz"
  },
  "_from": "asset-loader@",
  "_npmVersion": "1.2.18",
  "_npmUser": {
    "name": "dylanized",
    "email": "d@dylanized.com"
  },
  "maintainers": [
    {
      "name": "dylanized",
      "email": "d@dylanized.com"
    }
  ],
  "directories": {},
  "_shasum": "a7a6030fb2a6d0641522bff6cf638b5d58a2014f",
  "_resolved": "https://registry.npmjs.org/asset-loader/-/asset-loader-0.1.7.tgz"
}
